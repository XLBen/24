//// COMPUTE THE MINIMUM OF TWO VALUES
// This function takes two arguments and pushes the smaller of
// them onto the stack. To call this function, you should:
//   1. push two values onto the stack; and
//   2. call this function with `call Sys.min 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
// Push to the stack the minimum of two arguments.
//
function Sys.min 2
push argument 0
push argument 1
lt
if-goto LESS
goto GREATER

label LESS
push argument 0
goto END

label GREATER
push argument 1

label END
return



//// COMPUTE THE MAXIMUM OF TWO VALUES
// This function takes two arguments and pushes the larger of
// them onto the stack. To call this function, you should:
//   1. push two values onto the stack; and
//   2. call this function with `call Sys.max 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
// Push to the stack the minimum of two arguments.
//
function Sys.max 2
push argument 0
push argument 1
gt
if-goto GREATER
goto LESS

label GREATER
push argument 0
goto END

label LESS
push argument 1

label END
return



//// COMPUTE THE RANGE OF AN ARRAY.
// This function takes two arguments, representing an array of
// integers, and returns the range of the array onto the stack.
// The two arguments are:
//   ARG0 - memory location where the array starts, and
//   ARG1 - number of elements in the array.
// To call this function, you should:
//   1. push the address of the first array elementonto the stack;
//   2. push the number of array elements onto the stack; and
//   2. call this function with `call Sys.range 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//
function Sys.range 2
push ar
